package com.github.GTNH2Mega.fromScripts

import minetweaker.MineTweakerAPI
import minetweaker.api.data.IData
import minetweaker.api.item.IIngredient
import minetweaker.api.item.IngredientCondition
import minetweaker.expand.*
import minetweaker.mc1710.brackets.ItemBracketHandler
import java.util.*

class EnhancedLoot_Bags : Runnable {
    override fun run() {
        val recipes = MineTweakerAPI.recipes
        val item = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 1)
        val hashMap = HashMap<String, IData>()
        val s = "ench"
        val array = arrayOf<IData?>(null)
        val n = 0
        val hashMap2 = HashMap<String, IData>()
        hashMap2["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap2["id"] = ExpandShort.asNBT(35.toShort())
        array[n] = ExpandAnyDict.asData(hashMap2)
        hashMap[s] = ExpandAnyArray.asData(array)
        hashMap["RepairCost"] = ExpandInt.toData(2)
        val withTag = item.withTag(ExpandAnyDict.asData(hashMap))
        val array2 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 1), null, null)
        val n2 = 1
        val item2 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap3 = HashMap<String, IData>()
        val s2 = "StoredEnchantments"
        val array3 = arrayOf<IData?>(null)
        val n3 = 0
        val hashMap4 = HashMap<String, IData>()
        hashMap4["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap4["id"] = ExpandShort.asNBT(35.toShort())
        array3[n3] = ExpandAnyDict.asData(hashMap4)
        hashMap3[s2] = ExpandAnyArray.asData(array3)
        array2[n2] = IngredientCondition.onlyWithTag(item2, ExpandAnyDict.asData(hashMap3))
        array2[2] = ItemBracketHandler.getItem("minecraft:clay_ball", 0)
        recipes.addShapeless(withTag, array2, null)
        val recipes2 = MineTweakerAPI.recipes
        val item3 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 2)
        val hashMap5 = HashMap<String, IData>()
        val s3 = "ench"
        val array4 = arrayOf<IData?>(null)
        val n4 = 0
        val hashMap6 = HashMap<String, IData>()
        hashMap6["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap6["id"] = ExpandShort.asNBT(35.toShort())
        array4[n4] = ExpandAnyDict.asData(hashMap6)
        hashMap5[s3] = ExpandAnyArray.asData(array4)
        hashMap5["RepairCost"] = ExpandInt.toData(2)
        val withTag2 = item3.withTag(ExpandAnyDict.asData(hashMap5))
        val array5 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 2), null, null)
        val n5 = 1
        val item4 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap7 = HashMap<String, IData>()
        val s4 = "StoredEnchantments"
        val array6 = arrayOf<IData?>(null)
        val n6 = 0
        val hashMap8 = HashMap<String, IData>()
        hashMap8["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap8["id"] = ExpandShort.asNBT(35.toShort())
        array6[n6] = ExpandAnyDict.asData(hashMap8)
        hashMap7[s4] = ExpandAnyArray.asData(array6)
        array5[n5] = IngredientCondition.onlyWithTag(item4, ExpandAnyDict.asData(hashMap7))
        array5[2] = ItemBracketHandler.getItem("IC2:itemHarz", 0)
        recipes2.addShapeless(withTag2, array5, null)
        val recipes3 = MineTweakerAPI.recipes
        val item5 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 4)
        val hashMap9 = HashMap<String, IData>()
        val s5 = "ench"
        val array7 = arrayOf<IData?>(null)
        val n7 = 0
        val hashMap10 = HashMap<String, IData>()
        hashMap10["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap10["id"] = ExpandShort.asNBT(35.toShort())
        array7[n7] = ExpandAnyDict.asData(hashMap10)
        hashMap9[s5] = ExpandAnyArray.asData(array7)
        hashMap9["RepairCost"] = ExpandInt.toData(2)
        val withTag3 = item5.withTag(ExpandAnyDict.asData(hashMap9))
        val array8 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 4), null, null)
        val n8 = 1
        val item6 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap11 = HashMap<String, IData>()
        val s6 = "StoredEnchantments"
        val array9 = arrayOf<IData?>(null)
        val n9 = 0
        val hashMap12 = HashMap<String, IData>()
        hashMap12["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap12["id"] = ExpandShort.asNBT(35.toShort())
        array9[n9] = ExpandAnyDict.asData(hashMap12)
        hashMap11[s6] = ExpandAnyArray.asData(array9)
        array8[n8] = IngredientCondition.onlyWithTag(item6, ExpandAnyDict.asData(hashMap11))
        array8[2] = ItemBracketHandler.getItem("gregtech:gt.metaitem.01", 32610)
        recipes3.addShapeless(withTag3, array8, null)
        val recipes4 = MineTweakerAPI.recipes
        val item7 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 5)
        val hashMap13 = HashMap<String, IData>()
        val s7 = "ench"
        val array10 = arrayOf<IData?>(null)
        val n10 = 0
        val hashMap14 = HashMap<String, IData>()
        hashMap14["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap14["id"] = ExpandShort.asNBT(35.toShort())
        array10[n10] = ExpandAnyDict.asData(hashMap14)
        hashMap13[s7] = ExpandAnyArray.asData(array10)
        hashMap13["RepairCost"] = ExpandInt.toData(2)
        val withTag4 = item7.withTag(ExpandAnyDict.asData(hashMap13))
        val array11 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 5), null, null)
        val n11 = 1
        val item8 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap15 = HashMap<String, IData>()
        val s8 = "StoredEnchantments"
        val array12 = arrayOf<IData?>(null)
        val n12 = 0
        val hashMap16 = HashMap<String, IData>()
        hashMap16["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap16["id"] = ExpandShort.asNBT(35.toShort())
        array12[n12] = ExpandAnyDict.asData(hashMap16)
        hashMap15[s8] = ExpandAnyArray.asData(array12)
        array11[n11] = IngredientCondition.onlyWithTag(item8, ExpandAnyDict.asData(hashMap15))
        array11[2] = ItemBracketHandler.getItem("IC2:itemPartIndustrialDiamond", 0)
        recipes4.addShapeless(withTag4, array11, null)
        val recipes5 = MineTweakerAPI.recipes
        val item9 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 6)
        val hashMap17 = HashMap<String, IData>()
        val s9 = "ench"
        val array13 = arrayOf<IData?>(null)
        val n13 = 0
        val hashMap18 = HashMap<String, IData>()
        hashMap18["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap18["id"] = ExpandShort.asNBT(35.toShort())
        array13[n13] = ExpandAnyDict.asData(hashMap18)
        hashMap17[s9] = ExpandAnyArray.asData(array13)
        hashMap17["RepairCost"] = ExpandInt.toData(2)
        val withTag5 = item9.withTag(ExpandAnyDict.asData(hashMap17))
        val array14 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 6), null, null)
        val n14 = 1
        val item10 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap19 = HashMap<String, IData>()
        val s10 = "StoredEnchantments"
        val array15 = arrayOf<IData?>(null)
        val n15 = 0
        val hashMap20 = HashMap<String, IData>()
        hashMap20["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap20["id"] = ExpandShort.asNBT(35.toShort())
        array15[n15] = ExpandAnyDict.asData(hashMap20)
        hashMap19[s10] = ExpandAnyArray.asData(array15)
        array14[n14] = IngredientCondition.onlyWithTag(item10, ExpandAnyDict.asData(hashMap19))
        array14[2] = ItemBracketHandler.getItem("gregtech:gt.metaitem.01", 32602)
        recipes5.addShapeless(withTag5, array14, null)
        val recipes6 = MineTweakerAPI.recipes
        val item11 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 7)
        val hashMap21 = HashMap<String, IData>()
        val s11 = "ench"
        val array16 = arrayOf<IData?>(null)
        val n16 = 0
        val hashMap22 = HashMap<String, IData>()
        hashMap22["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap22["id"] = ExpandShort.asNBT(35.toShort())
        array16[n16] = ExpandAnyDict.asData(hashMap22)
        hashMap21[s11] = ExpandAnyArray.asData(array16)
        hashMap21["RepairCost"] = ExpandInt.toData(2)
        val withTag6 = item11.withTag(ExpandAnyDict.asData(hashMap21))
        val array17 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 7), null, null)
        val n17 = 1
        val item12 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap23 = HashMap<String, IData>()
        val s12 = "StoredEnchantments"
        val array18 = arrayOf<IData?>(null)
        val n18 = 0
        val hashMap24 = HashMap<String, IData>()
        hashMap24["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap24["id"] = ExpandShort.asNBT(35.toShort())
        array18[n18] = ExpandAnyDict.asData(hashMap24)
        hashMap23[s12] = ExpandAnyArray.asData(array18)
        array17[n17] = IngredientCondition.onlyWithTag(item12, ExpandAnyDict.asData(hashMap23))
        array17[2] = ItemBracketHandler.getItem("IC2:itemBatLamaCrystal", 32767)
        recipes6.addShapeless(withTag6, array17, null)
        val recipes7 = MineTweakerAPI.recipes
        val item13 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 8)
        val hashMap25 = HashMap<String, IData>()
        val s13 = "ench"
        val array19 = arrayOf<IData?>(null)
        val n19 = 0
        val hashMap26 = HashMap<String, IData>()
        hashMap26["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap26["id"] = ExpandShort.asNBT(35.toShort())
        array19[n19] = ExpandAnyDict.asData(hashMap26)
        hashMap25[s13] = ExpandAnyArray.asData(array19)
        hashMap25["RepairCost"] = ExpandInt.toData(2)
        val withTag7 = item13.withTag(ExpandAnyDict.asData(hashMap25))
        val array20 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 8), null, null)
        val n20 = 1
        val item14 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap27 = HashMap<String, IData>()
        val s14 = "StoredEnchantments"
        val array21 = arrayOf<IData?>(null)
        val n21 = 0
        val hashMap28 = HashMap<String, IData>()
        hashMap28["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap28["id"] = ExpandShort.asNBT(35.toShort())
        array21[n21] = ExpandAnyDict.asData(hashMap28)
        hashMap27[s14] = ExpandAnyArray.asData(array21)
        array20[n20] = IngredientCondition.onlyWithTag(item14, ExpandAnyDict.asData(hashMap27))
        array20[2] = ItemBracketHandler.getItem("gregtech:gt.metaitem.01", 32706)
        recipes7.addShapeless(withTag7, array20, null)
        val recipes8 = MineTweakerAPI.recipes
        val item15 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 9)
        val hashMap29 = HashMap<String, IData>()
        val s15 = "ench"
        val array22 = arrayOf<IData?>(null)
        val n22 = 0
        val hashMap30 = HashMap<String, IData>()
        hashMap30["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap30["id"] = ExpandShort.asNBT(35.toShort())
        array22[n22] = ExpandAnyDict.asData(hashMap30)
        hashMap29[s15] = ExpandAnyArray.asData(array22)
        hashMap29["RepairCost"] = ExpandInt.toData(2)
        val withTag8 = item15.withTag(ExpandAnyDict.asData(hashMap29))
        val array23 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 9), null, null)
        val n23 = 1
        val item16 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap31 = HashMap<String, IData>()
        val s16 = "StoredEnchantments"
        val array24 = arrayOf<IData?>(null)
        val n24 = 0
        val hashMap32 = HashMap<String, IData>()
        hashMap32["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap32["id"] = ExpandShort.asNBT(35.toShort())
        array24[n24] = ExpandAnyDict.asData(hashMap32)
        hashMap31[s16] = ExpandAnyArray.asData(array24)
        array23[n23] = IngredientCondition.onlyWithTag(item16, ExpandAnyDict.asData(hashMap31))
        array23[2] = ItemBracketHandler.getItem("Thaumcraft:ItemResource", 1)
        recipes8.addShapeless(withTag8, array23, null)
        val recipes9 = MineTweakerAPI.recipes
        val item17 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 10)
        val hashMap33 = HashMap<String, IData>()
        val s17 = "ench"
        val array25 = arrayOf<IData?>(null)
        val n25 = 0
        val hashMap34 = HashMap<String, IData>()
        hashMap34["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap34["id"] = ExpandShort.asNBT(35.toShort())
        array25[n25] = ExpandAnyDict.asData(hashMap34)
        hashMap33[s17] = ExpandAnyArray.asData(array25)
        hashMap33["RepairCost"] = ExpandInt.toData(2)
        val withTag9 = item17.withTag(ExpandAnyDict.asData(hashMap33))
        val array26 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 10), null, null)
        val n26 = 1
        val item18 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap35 = HashMap<String, IData>()
        val s18 = "StoredEnchantments"
        val array27 = arrayOf<IData?>(null)
        val n27 = 0
        val hashMap36 = HashMap<String, IData>()
        hashMap36["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap36["id"] = ExpandShort.asNBT(35.toShort())
        array27[n27] = ExpandAnyDict.asData(hashMap36)
        hashMap35[s18] = ExpandAnyArray.asData(array27)
        array26[n26] = IngredientCondition.onlyWithTag(item18, ExpandAnyDict.asData(hashMap35))
        array26[2] = ItemBracketHandler.getItem("Thaumcraft:ItemBathSalts", 0)
        recipes9.addShapeless(withTag9, array26, null)
        val recipes10 = MineTweakerAPI.recipes
        val item19 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 12)
        val hashMap37 = HashMap<String, IData>()
        val s19 = "ench"
        val array28 = arrayOf<IData?>(null)
        val n28 = 0
        val hashMap38 = HashMap<String, IData>()
        hashMap38["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap38["id"] = ExpandShort.asNBT(35.toShort())
        array28[n28] = ExpandAnyDict.asData(hashMap38)
        hashMap37[s19] = ExpandAnyArray.asData(array28)
        hashMap37["RepairCost"] = ExpandInt.toData(2)
        val withTag10 = item19.withTag(ExpandAnyDict.asData(hashMap37))
        val array29 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 12), null, null)
        val n29 = 1
        val item20 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap39 = HashMap<String, IData>()
        val s20 = "StoredEnchantments"
        val array30 = arrayOf<IData?>(null)
        val n30 = 0
        val hashMap40 = HashMap<String, IData>()
        hashMap40["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap40["id"] = ExpandShort.asNBT(35.toShort())
        array30[n30] = ExpandAnyDict.asData(hashMap40)
        hashMap39[s20] = ExpandAnyArray.asData(array30)
        array29[n29] = IngredientCondition.onlyWithTag(item20, ExpandAnyDict.asData(hashMap39))
        array29[2] = ItemBracketHandler.getItem("Thaumcraft:WandCap", 2)
        recipes10.addShapeless(withTag10, array29, null)
        val recipes11 = MineTweakerAPI.recipes
        val item21 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 13)
        val hashMap41 = HashMap<String, IData>()
        val s21 = "ench"
        val array31 = arrayOf<IData?>(null)
        val n31 = 0
        val hashMap42 = HashMap<String, IData>()
        hashMap42["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap42["id"] = ExpandShort.asNBT(35.toShort())
        array31[n31] = ExpandAnyDict.asData(hashMap42)
        hashMap41[s21] = ExpandAnyArray.asData(array31)
        hashMap41["RepairCost"] = ExpandInt.toData(2)
        val withTag11 = item21.withTag(ExpandAnyDict.asData(hashMap41))
        val array32 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 13), null, null)
        val n32 = 1
        val item22 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap43 = HashMap<String, IData>()
        val s22 = "StoredEnchantments"
        val array33 = arrayOf<IData?>(null)
        val n33 = 0
        val hashMap44 = HashMap<String, IData>()
        hashMap44["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap44["id"] = ExpandShort.asNBT(35.toShort())
        array33[n33] = ExpandAnyDict.asData(hashMap44)
        hashMap43[s22] = ExpandAnyArray.asData(array33)
        array32[n32] = IngredientCondition.onlyWithTag(item22, ExpandAnyDict.asData(hashMap43))
        array32[2] = ItemBracketHandler.getItem("ThaumicTinkerer:warpGate", 0)
        recipes11.addShapeless(withTag11, array32, null)
        val recipes12 = MineTweakerAPI.recipes
        val item23 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 14)
        val hashMap45 = HashMap<String, IData>()
        val s23 = "ench"
        val array34 = arrayOf<IData?>(null)
        val n34 = 0
        val hashMap46 = HashMap<String, IData>()
        hashMap46["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap46["id"] = ExpandShort.asNBT(35.toShort())
        array34[n34] = ExpandAnyDict.asData(hashMap46)
        hashMap45[s23] = ExpandAnyArray.asData(array34)
        hashMap45["RepairCost"] = ExpandInt.toData(2)
        val withTag12 = item23.withTag(ExpandAnyDict.asData(hashMap45))
        val array35 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 14), null, null)
        val n35 = 1
        val item24 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap47 = HashMap<String, IData>()
        val s24 = "StoredEnchantments"
        val array36 = arrayOf<IData?>(null)
        val n36 = 0
        val hashMap48 = HashMap<String, IData>()
        hashMap48["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap48["id"] = ExpandShort.asNBT(35.toShort())
        array36[n36] = ExpandAnyDict.asData(hashMap48)
        hashMap47[s24] = ExpandAnyArray.asData(array36)
        array35[n35] = IngredientCondition.onlyWithTag(item24, ExpandAnyDict.asData(hashMap47))
        array35[2] = ItemBracketHandler.getItem("DraconicEvolution:draconicCore", 0)
        recipes12.addShapeless(withTag12, array35, null)
        val recipes13 = MineTweakerAPI.recipes
        val item25 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 15)
        val hashMap49 = HashMap<String, IData>()
        val s25 = "ench"
        val array37 = arrayOf<IData?>(null)
        val n37 = 0
        val hashMap50 = HashMap<String, IData>()
        hashMap50["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap50["id"] = ExpandShort.asNBT(35.toShort())
        array37[n37] = ExpandAnyDict.asData(hashMap50)
        hashMap49[s25] = ExpandAnyArray.asData(array37)
        hashMap49["RepairCost"] = ExpandInt.toData(2)
        val withTag13 = item25.withTag(ExpandAnyDict.asData(hashMap49))
        val array38 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 15), null, null)
        val n38 = 1
        val item26 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap51 = HashMap<String, IData>()
        val s26 = "StoredEnchantments"
        val array39 = arrayOf<IData?>(null)
        val n39 = 0
        val hashMap52 = HashMap<String, IData>()
        hashMap52["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap52["id"] = ExpandShort.asNBT(35.toShort())
        array39[n39] = ExpandAnyDict.asData(hashMap52)
        hashMap51[s26] = ExpandAnyArray.asData(array39)
        array38[n38] = IngredientCondition.onlyWithTag(item26, ExpandAnyDict.asData(hashMap51))
        array38[2] = ItemBracketHandler.getItem("minecraft:dragon_egg", 0)
        recipes13.addShapeless(withTag13, array38, null)
        val recipes14 = MineTweakerAPI.recipes
        val item27 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 16)
        val hashMap53 = HashMap<String, IData>()
        val s27 = "ench"
        val array40 = arrayOf<IData?>(null)
        val n40 = 0
        val hashMap54 = HashMap<String, IData>()
        hashMap54["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap54["id"] = ExpandShort.asNBT(35.toShort())
        array40[n40] = ExpandAnyDict.asData(hashMap54)
        hashMap53[s27] = ExpandAnyArray.asData(array40)
        hashMap53["RepairCost"] = ExpandInt.toData(2)
        val withTag14 = item27.withTag(ExpandAnyDict.asData(hashMap53))
        val array41 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 16), null, null)
        val n41 = 1
        val item28 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap55 = HashMap<String, IData>()
        val s28 = "StoredEnchantments"
        val array42 = arrayOf<IData?>(null)
        val n42 = 0
        val hashMap56 = HashMap<String, IData>()
        hashMap56["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap56["id"] = ExpandShort.asNBT(35.toShort())
        array42[n42] = ExpandAnyDict.asData(hashMap56)
        hashMap55[s28] = ExpandAnyArray.asData(array42)
        array41[n41] = IngredientCondition.onlyWithTag(item28, ExpandAnyDict.asData(hashMap55))
        array41[2] = ItemBracketHandler.getItem("AWWayofTime:simpleCatalyst", 0)
        recipes14.addShapeless(withTag14, array41, null)
        val recipes15 = MineTweakerAPI.recipes
        val item29 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 17)
        val hashMap57 = HashMap<String, IData>()
        val s29 = "ench"
        val array43 = arrayOf<IData?>(null)
        val n43 = 0
        val hashMap58 = HashMap<String, IData>()
        hashMap58["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap58["id"] = ExpandShort.asNBT(35.toShort())
        array43[n43] = ExpandAnyDict.asData(hashMap58)
        hashMap57[s29] = ExpandAnyArray.asData(array43)
        hashMap57["RepairCost"] = ExpandInt.toData(2)
        val withTag15 = item29.withTag(ExpandAnyDict.asData(hashMap57))
        val array44 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 17), null, null)
        val n44 = 1
        val item30 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap59 = HashMap<String, IData>()
        val s30 = "StoredEnchantments"
        val array45 = arrayOf<IData?>(null)
        val n45 = 0
        val hashMap60 = HashMap<String, IData>()
        hashMap60["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap60["id"] = ExpandShort.asNBT(35.toShort())
        array45[n45] = ExpandAnyDict.asData(hashMap60)
        hashMap59[s30] = ExpandAnyArray.asData(array45)
        array44[n44] = IngredientCondition.onlyWithTag(item30, ExpandAnyDict.asData(hashMap59))
        array44[2] = ItemBracketHandler.getItem("AWWayofTime:imbuedSlate", 0)
        recipes15.addShapeless(withTag15, array44, null)
        val recipes16 = MineTweakerAPI.recipes
        val item31 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 18)
        val hashMap61 = HashMap<String, IData>()
        val s31 = "ench"
        val array46 = arrayOf<IData?>(null)
        val n46 = 0
        val hashMap62 = HashMap<String, IData>()
        hashMap62["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap62["id"] = ExpandShort.asNBT(35.toShort())
        array46[n46] = ExpandAnyDict.asData(hashMap62)
        hashMap61[s31] = ExpandAnyArray.asData(array46)
        hashMap61["RepairCost"] = ExpandInt.toData(2)
        val withTag16 = item31.withTag(ExpandAnyDict.asData(hashMap61))
        val array47 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 18), null, null)
        val n47 = 1
        val item32 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap63 = HashMap<String, IData>()
        val s32 = "StoredEnchantments"
        val array48 = arrayOf<IData?>(null)
        val n48 = 0
        val hashMap64 = HashMap<String, IData>()
        hashMap64["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap64["id"] = ExpandShort.asNBT(35.toShort())
        array48[n48] = ExpandAnyDict.asData(hashMap64)
        hashMap63[s32] = ExpandAnyArray.asData(array48)
        array47[n47] = IngredientCondition.onlyWithTag(item32, ExpandAnyDict.asData(hashMap63))
        array47[2] = ItemBracketHandler.getItem("AWWayofTime:blockTeleposer", 0)
        recipes16.addShapeless(withTag16, array47, null)
        val recipes17 = MineTweakerAPI.recipes
        val item33 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 19)
        val hashMap65 = HashMap<String, IData>()
        val s33 = "ench"
        val array49 = arrayOf<IData?>(null)
        val n49 = 0
        val hashMap66 = HashMap<String, IData>()
        hashMap66["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap66["id"] = ExpandShort.asNBT(35.toShort())
        array49[n49] = ExpandAnyDict.asData(hashMap66)
        hashMap65[s33] = ExpandAnyArray.asData(array49)
        hashMap65["RepairCost"] = ExpandInt.toData(2)
        val withTag17 = item33.withTag(ExpandAnyDict.asData(hashMap65))
        val array50 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 19), null, null)
        val n50 = 1
        val item34 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap67 = HashMap<String, IData>()
        val s34 = "StoredEnchantments"
        val array51 = arrayOf<IData?>(null)
        val n51 = 0
        val hashMap68 = HashMap<String, IData>()
        hashMap68["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap68["id"] = ExpandShort.asNBT(35.toShort())
        array51[n51] = ExpandAnyDict.asData(hashMap68)
        hashMap67[s34] = ExpandAnyArray.asData(array51)
        array50[n50] = IngredientCondition.onlyWithTag(item34, ExpandAnyDict.asData(hashMap67))
        array50[2] = ItemBracketHandler.getItem("Forestry:waxCapsule", 0)
        recipes17.addShapeless(withTag17, array50, null)
        val recipes18 = MineTweakerAPI.recipes
        val item35 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 20)
        val hashMap69 = HashMap<String, IData>()
        val s35 = "ench"
        val array52 = arrayOf<IData?>(null)
        val n52 = 0
        val hashMap70 = HashMap<String, IData>()
        hashMap70["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap70["id"] = ExpandShort.asNBT(35.toShort())
        array52[n52] = ExpandAnyDict.asData(hashMap70)
        hashMap69[s35] = ExpandAnyArray.asData(array52)
        hashMap69["RepairCost"] = ExpandInt.toData(2)
        val withTag18 = item35.withTag(ExpandAnyDict.asData(hashMap69))
        val array53 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 20), null, null)
        val n53 = 1
        val item36 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap71 = HashMap<String, IData>()
        val s36 = "StoredEnchantments"
        val array54 = arrayOf<IData?>(null)
        val n54 = 0
        val hashMap72 = HashMap<String, IData>()
        hashMap72["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap72["id"] = ExpandShort.asNBT(35.toShort())
        array54[n54] = ExpandAnyDict.asData(hashMap72)
        hashMap71[s36] = ExpandAnyArray.asData(array54)
        array53[n53] = IngredientCondition.onlyWithTag(item36, ExpandAnyDict.asData(hashMap71))
        array53[2] = ItemBracketHandler.getItem("Forestry:craftingMaterial", 6)
        recipes18.addShapeless(withTag18, array53, null)
        val recipes19 = MineTweakerAPI.recipes
        val item37 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 21)
        val hashMap73 = HashMap<String, IData>()
        val s37 = "ench"
        val array55 = arrayOf<IData?>(null)
        val n55 = 0
        val hashMap74 = HashMap<String, IData>()
        hashMap74["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap74["id"] = ExpandShort.asNBT(35.toShort())
        array55[n55] = ExpandAnyDict.asData(hashMap74)
        hashMap73[s37] = ExpandAnyArray.asData(array55)
        hashMap73["RepairCost"] = ExpandInt.toData(2)
        val withTag19 = item37.withTag(ExpandAnyDict.asData(hashMap73))
        val array56 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 21), null, null)
        val n56 = 1
        val item38 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap75 = HashMap<String, IData>()
        val s38 = "StoredEnchantments"
        val array57 = arrayOf<IData?>(null)
        val n57 = 0
        val hashMap76 = HashMap<String, IData>()
        hashMap76["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap76["id"] = ExpandShort.asNBT(35.toShort())
        array57[n57] = ExpandAnyDict.asData(hashMap76)
        hashMap75[s38] = ExpandAnyArray.asData(array57)
        array56[n56] = IngredientCondition.onlyWithTag(item38, ExpandAnyDict.asData(hashMap75))
        array56[2] = ItemBracketHandler.getItem("Forestry:hardenedMachine", 0)
        recipes19.addShapeless(withTag19, array56, null)
        val recipes20 = MineTweakerAPI.recipes
        val item39 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 22)
        val hashMap77 = HashMap<String, IData>()
        val s39 = "ench"
        val array58 = arrayOf<IData?>(null)
        val n58 = 0
        val hashMap78 = HashMap<String, IData>()
        hashMap78["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap78["id"] = ExpandShort.asNBT(35.toShort())
        array58[n58] = ExpandAnyDict.asData(hashMap78)
        hashMap77[s39] = ExpandAnyArray.asData(array58)
        hashMap77["RepairCost"] = ExpandInt.toData(2)
        val withTag20 = item39.withTag(ExpandAnyDict.asData(hashMap77))
        val array59 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 22), null, null)
        val n59 = 1
        val item40 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap79 = HashMap<String, IData>()
        val s40 = "StoredEnchantments"
        val array60 = arrayOf<IData?>(null)
        val n60 = 0
        val hashMap80 = HashMap<String, IData>()
        hashMap80["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap80["id"] = ExpandShort.asNBT(35.toShort())
        array60[n60] = ExpandAnyDict.asData(hashMap80)
        hashMap79[s40] = ExpandAnyArray.asData(array60)
        array59[n59] = IngredientCondition.onlyWithTag(item40, ExpandAnyDict.asData(hashMap79))
        array59[2] = ItemBracketHandler.getItem("GalacticraftCore:item.airFan", 0)
        recipes20.addShapeless(withTag20, array59, null)
        val recipes21 = MineTweakerAPI.recipes
        val item41 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 23)
        val hashMap81 = HashMap<String, IData>()
        val s41 = "ench"
        val array61 = arrayOf<IData?>(null)
        val n61 = 0
        val hashMap82 = HashMap<String, IData>()
        hashMap82["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap82["id"] = ExpandShort.asNBT(35.toShort())
        array61[n61] = ExpandAnyDict.asData(hashMap82)
        hashMap81[s41] = ExpandAnyArray.asData(array61)
        hashMap81["RepairCost"] = ExpandInt.toData(2)
        val withTag21 = item41.withTag(ExpandAnyDict.asData(hashMap81))
        val array62 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 23), null, null)
        val n62 = 1
        val item42 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap83 = HashMap<String, IData>()
        val s42 = "StoredEnchantments"
        val array63 = arrayOf<IData?>(null)
        val n63 = 0
        val hashMap84 = HashMap<String, IData>()
        hashMap84["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap84["id"] = ExpandShort.asNBT(35.toShort())
        array63[n63] = ExpandAnyDict.asData(hashMap84)
        hashMap83[s42] = ExpandAnyArray.asData(array63)
        array62[n62] = IngredientCondition.onlyWithTag(item42, ExpandAnyDict.asData(hashMap83))
        array62[2] = ItemBracketHandler.getItem("GalacticraftMars:item.itemBasicAsteroids", 7)
        recipes21.addShapeless(withTag21, array62, null)
        val recipes22 = MineTweakerAPI.recipes
        val item43 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 24)
        val hashMap85 = HashMap<String, IData>()
        val s43 = "ench"
        val array64 = arrayOf<IData?>(null)
        val n64 = 0
        val hashMap86 = HashMap<String, IData>()
        hashMap86["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap86["id"] = ExpandShort.asNBT(35.toShort())
        array64[n64] = ExpandAnyDict.asData(hashMap86)
        hashMap85[s43] = ExpandAnyArray.asData(array64)
        hashMap85["RepairCost"] = ExpandInt.toData(2)
        val withTag22 = item43.withTag(ExpandAnyDict.asData(hashMap85))
        val array65 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 24), null, null)
        val n65 = 1
        val item44 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap87 = HashMap<String, IData>()
        val s44 = "StoredEnchantments"
        val array66 = arrayOf<IData?>(null)
        val n66 = 0
        val hashMap88 = HashMap<String, IData>()
        hashMap88["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap88["id"] = ExpandShort.asNBT(35.toShort())
        array66[n66] = ExpandAnyDict.asData(hashMap88)
        hashMap87[s44] = ExpandAnyArray.asData(array66)
        array65[n65] = IngredientCondition.onlyWithTag(item44, ExpandAnyDict.asData(hashMap87))
        array65[2] = ItemBracketHandler.getItem("dreamcraft:item.WaferTier3", 0)
        recipes22.addShapeless(withTag22, array65, null)
        val recipes23 = MineTweakerAPI.recipes
        val item45 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 25)
        val hashMap89 = HashMap<String, IData>()
        val s45 = "ench"
        val array67 = arrayOf<IData?>(null)
        val n67 = 0
        val hashMap90 = HashMap<String, IData>()
        hashMap90["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap90["id"] = ExpandShort.asNBT(35.toShort())
        array67[n67] = ExpandAnyDict.asData(hashMap90)
        hashMap89[s45] = ExpandAnyArray.asData(array67)
        hashMap89["RepairCost"] = ExpandInt.toData(2)
        val withTag23 = item45.withTag(ExpandAnyDict.asData(hashMap89))
        val array68 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 25), null, null)
        val n68 = 1
        val item46 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap91 = HashMap<String, IData>()
        val s46 = "StoredEnchantments"
        val array69 = arrayOf<IData?>(null)
        val n69 = 0
        val hashMap92 = HashMap<String, IData>()
        hashMap92["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap92["id"] = ExpandShort.asNBT(35.toShort())
        array69[n69] = ExpandAnyDict.asData(hashMap92)
        hashMap91[s46] = ExpandAnyArray.asData(array69)
        array68[n68] = IngredientCondition.onlyWithTag(item46, ExpandAnyDict.asData(hashMap91))
        array68[2] = ItemBracketHandler.getItem("Forestry:propolis", 3)
        recipes23.addShapeless(withTag23, array68, null)
        val recipes24 = MineTweakerAPI.recipes
        val item47 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 26)
        val hashMap93 = HashMap<String, IData>()
        val s47 = "ench"
        val array70 = arrayOf<IData?>(null)
        val n70 = 0
        val hashMap94 = HashMap<String, IData>()
        hashMap94["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap94["id"] = ExpandShort.asNBT(35.toShort())
        array70[n70] = ExpandAnyDict.asData(hashMap94)
        hashMap93[s47] = ExpandAnyArray.asData(array70)
        hashMap93["RepairCost"] = ExpandInt.toData(2)
        val withTag24 = item47.withTag(ExpandAnyDict.asData(hashMap93))
        val array71 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 26), null, null)
        val n71 = 1
        val item48 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap95 = HashMap<String, IData>()
        val s48 = "StoredEnchantments"
        val array72 = arrayOf<IData?>(null)
        val n72 = 0
        val hashMap96 = HashMap<String, IData>()
        hashMap96["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap96["id"] = ExpandShort.asNBT(35.toShort())
        array72[n72] = ExpandAnyDict.asData(hashMap96)
        hashMap95[s48] = ExpandAnyArray.asData(array72)
        array71[n71] = IngredientCondition.onlyWithTag(item48, ExpandAnyDict.asData(hashMap95))
        array71[2] = ItemBracketHandler.getItem("Forestry:royalJelly", 0)
        recipes24.addShapeless(withTag24, array71, null)
        val recipes25 = MineTweakerAPI.recipes
        val item49 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 27)
        val hashMap97 = HashMap<String, IData>()
        val s49 = "ench"
        val array73 = arrayOf<IData?>(null)
        val n73 = 0
        val hashMap98 = HashMap<String, IData>()
        hashMap98["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap98["id"] = ExpandShort.asNBT(35.toShort())
        array73[n73] = ExpandAnyDict.asData(hashMap98)
        hashMap97[s49] = ExpandAnyArray.asData(array73)
        hashMap97["RepairCost"] = ExpandInt.toData(2)
        val withTag25 = item49.withTag(ExpandAnyDict.asData(hashMap97))
        val array74 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 27), null, null)
        val n74 = 1
        val item50 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap99 = HashMap<String, IData>()
        val s50 = "StoredEnchantments"
        val array75 = arrayOf<IData?>(null)
        val n75 = 0
        val hashMap100 = HashMap<String, IData>()
        hashMap100["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap100["id"] = ExpandShort.asNBT(35.toShort())
        array75[n75] = ExpandAnyDict.asData(hashMap100)
        hashMap99[s50] = ExpandAnyArray.asData(array75)
        array74[n74] = IngredientCondition.onlyWithTag(item50, ExpandAnyDict.asData(hashMap99))
        array74[2] = ItemBracketHandler.getItem("gendustry:MutagenBucket", 0)
        recipes25.addShapeless(withTag25, array74, null)
        val recipes26 = MineTweakerAPI.recipes
        val item51 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 28)
        val hashMap101 = HashMap<String, IData>()
        val s51 = "ench"
        val array76 = arrayOf<IData?>(null)
        val n76 = 0
        val hashMap102 = HashMap<String, IData>()
        hashMap102["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap102["id"] = ExpandShort.asNBT(35.toShort())
        array76[n76] = ExpandAnyDict.asData(hashMap102)
        hashMap101[s51] = ExpandAnyArray.asData(array76)
        hashMap101["RepairCost"] = ExpandInt.toData(2)
        val withTag26 = item51.withTag(ExpandAnyDict.asData(hashMap101))
        val array77 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 28), null, null)
        val n77 = 1
        val item52 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap103 = HashMap<String, IData>()
        val s52 = "StoredEnchantments"
        val array78 = arrayOf<IData?>(null)
        val n78 = 0
        val hashMap104 = HashMap<String, IData>()
        hashMap104["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap104["id"] = ExpandShort.asNBT(35.toShort())
        array78[n78] = ExpandAnyDict.asData(hashMap104)
        hashMap103[s52] = ExpandAnyArray.asData(array78)
        array77[n77] = IngredientCondition.onlyWithTag(item52, ExpandAnyDict.asData(hashMap103))
        array77[2] = ItemBracketHandler.getItem("minecraft:cake", 0)
        recipes26.addShapeless(withTag26, array77, null)
        val recipes27 = MineTweakerAPI.recipes
        val item53 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 29)
        val hashMap105 = HashMap<String, IData>()
        val s53 = "ench"
        val array79 = arrayOf<IData?>(null)
        val n79 = 0
        val hashMap106 = HashMap<String, IData>()
        hashMap106["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap106["id"] = ExpandShort.asNBT(35.toShort())
        array79[n79] = ExpandAnyDict.asData(hashMap106)
        hashMap105[s53] = ExpandAnyArray.asData(array79)
        hashMap105["RepairCost"] = ExpandInt.toData(2)
        val withTag27 = item53.withTag(ExpandAnyDict.asData(hashMap105))
        val array80 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 29), null, null)
        val n80 = 1
        val item54 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap107 = HashMap<String, IData>()
        val s54 = "StoredEnchantments"
        val array81 = arrayOf<IData?>(null)
        val n81 = 0
        val hashMap108 = HashMap<String, IData>()
        hashMap108["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap108["id"] = ExpandShort.asNBT(35.toShort())
        array81[n81] = ExpandAnyDict.asData(hashMap108)
        hashMap107[s54] = ExpandAnyArray.asData(array81)
        array80[n80] = IngredientCondition.onlyWithTag(item54, ExpandAnyDict.asData(hashMap107))
        array80[2] = ItemBracketHandler.getItem("gregtech:gt.metaitem.02", 32243)
        recipes27.addShapeless(withTag27, array80, null)

        //TODO Replace ("harvestcraft:delightedmealItem", 0)
        //val recipes28 = MineTweakerAPI.recipes
        //val item55 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 30)
        //val hashMap109 = HashMap<String, IData>()
        //val s55 = "ench"
        //val array82 = arrayOf<IData?>(null)
        //val n82 = 0
        //val hashMap110 = HashMap<String, IData>()
        //hashMap110["lvl"] = ExpandShort.asNBT(3.toShort())
        //hashMap110["id"] = ExpandShort.asNBT(35.toShort())
        //array82[n82] = ExpandAnyDict.asData(hashMap110)
        //hashMap109[s55] = ExpandAnyArray.asData(array82)
        //hashMap109["RepairCost"] = ExpandInt.toData(2)
        //val withTag28 = item55.withTag(ExpandAnyDict.asData(hashMap109))
        //val array83 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 30), null, null)
        //val n83 = 1
        //val item56 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        //val hashMap111 = HashMap<String, IData>()
        //val s56 = "StoredEnchantments"
        //val array84 = arrayOf<IData?>(null)
        //val n84 = 0
        //val hashMap112 = HashMap<String, IData>()
        //hashMap112["lvl"] = ExpandShort.asNBT(3.toShort())
        //hashMap112["id"] = ExpandShort.asNBT(35.toShort())
        //array84[n84] = ExpandAnyDict.asData(hashMap112)
        //hashMap111[s56] = ExpandAnyArray.asData(array84)
        //array83[n83] = IngredientCondition.onlyWithTag(item56, ExpandAnyDict.asData(hashMap111))
        //array83[2] = ItemBracketHandler.getItem("harvestcraft:delightedmealItem", 0)
        //recipes28.addShapeless(withTag28, array83, null)

        val recipes29 = MineTweakerAPI.recipes
        val item57 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 31)
        val hashMap113 = HashMap<String, IData>()
        val s57 = "ench"
        val array85 = arrayOf<IData?>(null)
        val n85 = 0
        val hashMap114 = HashMap<String, IData>()
        hashMap114["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap114["id"] = ExpandShort.asNBT(35.toShort())
        array85[n85] = ExpandAnyDict.asData(hashMap114)
        hashMap113[s57] = ExpandAnyArray.asData(array85)
        hashMap113["RepairCost"] = ExpandInt.toData(2)
        val withTag29 = item57.withTag(ExpandAnyDict.asData(hashMap113))
        val array86 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 31), null, null)
        val n86 = 1
        val item58 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap115 = HashMap<String, IData>()
        val s58 = "StoredEnchantments"
        val array87 = arrayOf<IData?>(null)
        val n87 = 0
        val hashMap116 = HashMap<String, IData>()
        hashMap116["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap116["id"] = ExpandShort.asNBT(35.toShort())
        array87[n87] = ExpandAnyDict.asData(hashMap116)
        hashMap115[s58] = ExpandAnyArray.asData(array87)
        array86[n86] = IngredientCondition.onlyWithTag(item58, ExpandAnyDict.asData(hashMap115))
        array86[2] = ItemBracketHandler.getItem("DraconicEvolution:dezilsMarshmallow", 0)
        recipes29.addShapeless(withTag29, array86, null)
        val recipes30 = MineTweakerAPI.recipes
        val item59 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 32)
        val hashMap117 = HashMap<String, IData>()
        val s59 = "ench"
        val array88 = arrayOf<IData?>(null)
        val n88 = 0
        val hashMap118 = HashMap<String, IData>()
        hashMap118["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap118["id"] = ExpandShort.asNBT(35.toShort())
        array88[n88] = ExpandAnyDict.asData(hashMap118)
        hashMap117[s59] = ExpandAnyArray.asData(array88)
        hashMap117["RepairCost"] = ExpandInt.toData(2)
        val withTag30 = item59.withTag(ExpandAnyDict.asData(hashMap117))
        val array89 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 32), null, null)
        val n89 = 1
        val item60 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap119 = HashMap<String, IData>()
        val s60 = "StoredEnchantments"
        val array90 = arrayOf<IData?>(null)
        val n90 = 0
        val hashMap120 = HashMap<String, IData>()
        hashMap120["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap120["id"] = ExpandShort.asNBT(35.toShort())
        array90[n90] = ExpandAnyDict.asData(hashMap120)
        hashMap119[s60] = ExpandAnyArray.asData(array90)
        array89[n89] = IngredientCondition.onlyWithTag(item60, ExpandAnyDict.asData(hashMap119))
        array89[2] = ItemBracketHandler.getItem("minecraft:minecart", 0)
        recipes30.addShapeless(withTag30, array89, null)
        val recipes31 = MineTweakerAPI.recipes
        val item61 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 33)
        val hashMap121 = HashMap<String, IData>()
        val s61 = "ench"
        val array91 = arrayOf<IData?>(null)
        val n91 = 0
        val hashMap122 = HashMap<String, IData>()
        hashMap122["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap122["id"] = ExpandShort.asNBT(35.toShort())
        array91[n91] = ExpandAnyDict.asData(hashMap122)
        hashMap121[s61] = ExpandAnyArray.asData(array91)
        hashMap121["RepairCost"] = ExpandInt.toData(2)
        val withTag31 = item61.withTag(ExpandAnyDict.asData(hashMap121))
        val array92 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 33), null, null)
        val n92 = 1
        val item62 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap123 = HashMap<String, IData>()
        val s62 = "StoredEnchantments"
        val array93 = arrayOf<IData?>(null)
        val n93 = 0
        val hashMap124 = HashMap<String, IData>()
        hashMap124["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap124["id"] = ExpandShort.asNBT(35.toShort())
        array93[n93] = ExpandAnyDict.asData(hashMap124)
        hashMap123[s62] = ExpandAnyArray.asData(array93)
        array92[n92] = IngredientCondition.onlyWithTag(item62, ExpandAnyDict.asData(hashMap123))
        val n94 = 2
        val item63 = ItemBracketHandler.getItem("Railcraft:track", 816)
        val hashMap125 = HashMap<String, IData>()
        hashMap125["track"] = ExpandString.asData("railcraft:track.speed")
        array92[n94] = item63.withTag(ExpandAnyDict.asData(hashMap125))
        recipes31.addShapeless(withTag31, array92, null)
        val recipes32 = MineTweakerAPI.recipes
        val item64 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 34)
        val hashMap126 = HashMap<String, IData>()
        val s63 = "ench"
        val array94 = arrayOf<IData?>(null)
        val n95 = 0
        val hashMap127 = HashMap<String, IData>()
        hashMap127["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap127["id"] = ExpandShort.asNBT(35.toShort())
        array94[n95] = ExpandAnyDict.asData(hashMap127)
        hashMap126[s63] = ExpandAnyArray.asData(array94)
        hashMap126["RepairCost"] = ExpandInt.toData(2)
        val withTag32 = item64.withTag(ExpandAnyDict.asData(hashMap126))
        val array95 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 34), null, null)
        val n96 = 1
        val item65 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap128 = HashMap<String, IData>()
        val s64 = "StoredEnchantments"
        val array96 = arrayOf<IData?>(null)
        val n97 = 0
        val hashMap129 = HashMap<String, IData>()
        hashMap129["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap129["id"] = ExpandShort.asNBT(35.toShort())
        array96[n97] = ExpandAnyDict.asData(hashMap129)
        hashMap128[s64] = ExpandAnyArray.asData(array96)
        array95[n96] = IngredientCondition.onlyWithTag(item65, ExpandAnyDict.asData(hashMap128))
        val n98 = 2
        val item66 = ItemBracketHandler.getItem("Railcraft:cart.loco.electric", 0)
        val hashMap130 = HashMap<String, IData>()
        hashMap130["model"] = ExpandString.asData("railcraft:default")
        array95[n98] = item66.withTag(ExpandAnyDict.asData(hashMap130))
        recipes32.addShapeless(withTag32, array95, null)

        //TODO Replace ("harvestcraft:epicbaconItem", 0)
        //val recipes33 = MineTweakerAPI.recipes
        //val item67 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 35)
        //val hashMap131 = HashMap<String, IData>()
        //val s65 = "ench"
        //val array97 = arrayOf<IData?>(null)
        //val n99 = 0
        //val hashMap132 = HashMap<String, IData>()
        //hashMap132["lvl"] = ExpandShort.asNBT(3.toShort())
        //hashMap132["id"] = ExpandShort.asNBT(35.toShort())
        //array97[n99] = ExpandAnyDict.asData(hashMap132)
        //hashMap131[s65] = ExpandAnyArray.asData(array97)
        //hashMap131["RepairCost"] = ExpandInt.toData(2)
        //val withTag33 = item67.withTag(ExpandAnyDict.asData(hashMap131))
        //val array98 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 35), null, null)
        //val n100 = 1
        //val item68 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        //val hashMap133 = HashMap<String, IData>()
        //val s66 = "StoredEnchantments"
        //val array99 = arrayOf<IData?>(null)
        //val n101 = 0
        //val hashMap134 = HashMap<String, IData>()
        //hashMap134["lvl"] = ExpandShort.asNBT(3.toShort())
        //hashMap134["id"] = ExpandShort.asNBT(35.toShort())
        //array99[n101] = ExpandAnyDict.asData(hashMap134)
        //hashMap133[s66] = ExpandAnyArray.asData(array99)
        //array98[n100] = IngredientCondition.onlyWithTag(item68, ExpandAnyDict.asData(hashMap133))
        //array98[2] = ItemBracketHandler.getItem("harvestcraft:epicbaconItem", 0)
        //recipes33.addShapeless(withTag33, array98, null)

        //TODO Replace ("harvestcraft:beefwellingtonItem", 0)
        //val recipes34 = MineTweakerAPI.recipes
        //val item69 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 36)
        //val hashMap135 = HashMap<String, IData>()
        //val s67 = "ench"
        //val array100 = arrayOf<IData?>(null)
        //val n102 = 0
        //val hashMap136 = HashMap<String, IData>()
        //hashMap136["lvl"] = ExpandShort.asNBT(3.toShort())
        //hashMap136["id"] = ExpandShort.asNBT(35.toShort())
        //array100[n102] = ExpandAnyDict.asData(hashMap136)
        //hashMap135[s67] = ExpandAnyArray.asData(array100)
        //hashMap135["RepairCost"] = ExpandInt.toData(2)
        //val withTag34 = item69.withTag(ExpandAnyDict.asData(hashMap135))
        //val array101 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 36), null, null)
        //val n103 = 1
        //val item70 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        //val hashMap137 = HashMap<String, IData>()
        //val s68 = "StoredEnchantments"
        //val array102 = arrayOf<IData?>(null)
        //val n104 = 0
        //val hashMap138 = HashMap<String, IData>()
        //hashMap138["lvl"] = ExpandShort.asNBT(3.toShort())
        //hashMap138["id"] = ExpandShort.asNBT(35.toShort())
        //array102[n104] = ExpandAnyDict.asData(hashMap138)
        //hashMap137[s68] = ExpandAnyArray.asData(array102)
        //array101[n103] = IngredientCondition.onlyWithTag(item70, ExpandAnyDict.asData(hashMap137))
        //array101[2] = ItemBracketHandler.getItem("harvestcraft:beefwellingtonItem", 0)
        //recipes34.addShapeless(withTag34, array101, null)

        val recipes35 = MineTweakerAPI.recipes
        val item71 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 37)
        val hashMap139 = HashMap<String, IData>()
        val s69 = "ench"
        val array103 = arrayOf<IData?>(null)
        val n105 = 0
        val hashMap140 = HashMap<String, IData>()
        hashMap140["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap140["id"] = ExpandShort.asNBT(35.toShort())
        array103[n105] = ExpandAnyDict.asData(hashMap140)
        hashMap139[s69] = ExpandAnyArray.asData(array103)
        hashMap139["RepairCost"] = ExpandInt.toData(2)
        val withTag35 = item71.withTag(ExpandAnyDict.asData(hashMap139))
        val array104 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 37), null, null)
        val n106 = 1
        val item72 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap141 = HashMap<String, IData>()
        val s70 = "StoredEnchantments"
        val array105 = arrayOf<IData?>(null)
        val n107 = 0
        val hashMap142 = HashMap<String, IData>()
        hashMap142["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap142["id"] = ExpandShort.asNBT(35.toShort())
        array105[n107] = ExpandAnyDict.asData(hashMap142)
        hashMap141[s70] = ExpandAnyArray.asData(array105)
        array104[n106] = IngredientCondition.onlyWithTag(item72, ExpandAnyDict.asData(hashMap141))
        array104[2] = ItemBracketHandler.getItem("appliedenergistics2:item.ItemMultiMaterial", 22)
        recipes35.addShapeless(withTag35, array104, null)
        val recipes36 = MineTweakerAPI.recipes
        val item73 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 38)
        val hashMap143 = HashMap<String, IData>()
        val s71 = "ench"
        val array106 = arrayOf<IData?>(null)
        val n108 = 0
        val hashMap144 = HashMap<String, IData>()
        hashMap144["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap144["id"] = ExpandShort.asNBT(35.toShort())
        array106[n108] = ExpandAnyDict.asData(hashMap144)
        hashMap143[s71] = ExpandAnyArray.asData(array106)
        hashMap143["RepairCost"] = ExpandInt.toData(2)
        val withTag36 = item73.withTag(ExpandAnyDict.asData(hashMap143))
        val array107 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 38), null, null)
        val n109 = 1
        val item74 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap145 = HashMap<String, IData>()
        val s72 = "StoredEnchantments"
        val array108 = arrayOf<IData?>(null)
        val n110 = 0
        val hashMap146 = HashMap<String, IData>()
        hashMap146["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap146["id"] = ExpandShort.asNBT(35.toShort())
        array108[n110] = ExpandAnyDict.asData(hashMap146)
        hashMap145[s72] = ExpandAnyArray.asData(array108)
        array107[n109] = IngredientCondition.onlyWithTag(item74, ExpandAnyDict.asData(hashMap145))
        array107[2] = ItemBracketHandler.getItem("appliedenergistics2:item.ItemMultiMaterial", 30)
        recipes36.addShapeless(withTag36, array107, null)
        val recipes37 = MineTweakerAPI.recipes
        val item75 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 41)
        val hashMap147 = HashMap<String, IData>()
        val s73 = "ench"
        val array109 = arrayOf<IData?>(null)
        val n111 = 0
        val hashMap148 = HashMap<String, IData>()
        hashMap148["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap148["id"] = ExpandShort.asNBT(35.toShort())
        array109[n111] = ExpandAnyDict.asData(hashMap148)
        hashMap147[s73] = ExpandAnyArray.asData(array109)
        hashMap147["RepairCost"] = ExpandInt.toData(2)
        val withTag37 = item75.withTag(ExpandAnyDict.asData(hashMap147))
        val array110 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 41), null, null)
        val n112 = 1
        val item76 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap149 = HashMap<String, IData>()
        val s74 = "StoredEnchantments"
        val array111 = arrayOf<IData?>(null)
        val n113 = 0
        val hashMap150 = HashMap<String, IData>()
        hashMap150["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap150["id"] = ExpandShort.asNBT(35.toShort())
        array111[n113] = ExpandAnyDict.asData(hashMap150)
        hashMap149[s74] = ExpandAnyArray.asData(array111)
        array110[n112] = IngredientCondition.onlyWithTag(item76, ExpandAnyDict.asData(hashMap149))
        array110[2] = ItemBracketHandler.getItem("gregtech:gt.metaitem.01", 17070)
        recipes37.addShapeless(withTag37, array110, null)
        val recipes38 = MineTweakerAPI.recipes
        val item77 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 45)
        val hashMap151 = HashMap<String, IData>()
        val s75 = "ench"
        val array112 = arrayOf<IData?>(null)
        val n114 = 0
        val hashMap152 = HashMap<String, IData>()
        hashMap152["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap152["id"] = ExpandShort.asNBT(35.toShort())
        array112[n114] = ExpandAnyDict.asData(hashMap152)
        hashMap151[s75] = ExpandAnyArray.asData(array112)
        hashMap151["RepairCost"] = ExpandInt.toData(2)
        val withTag38 = item77.withTag(ExpandAnyDict.asData(hashMap151))
        val array113 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 45), null, null)
        val n115 = 1
        val item78 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap153 = HashMap<String, IData>()
        val s76 = "StoredEnchantments"
        val array114 = arrayOf<IData?>(null)
        val n116 = 0
        val hashMap154 = HashMap<String, IData>()
        hashMap154["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap154["id"] = ExpandShort.asNBT(35.toShort())
        array114[n116] = ExpandAnyDict.asData(hashMap154)
        hashMap153[s76] = ExpandAnyArray.asData(array114)
        array113[n115] = IngredientCondition.onlyWithTag(item78, ExpandAnyDict.asData(hashMap153))
        array113[2] = ItemBracketHandler.getItem("OpenComputers:eeprom", 0)
        recipes38.addShapeless(withTag38, array113, null)
        val recipes39 = MineTweakerAPI.recipes
        val item79 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 46)
        val hashMap155 = HashMap<String, IData>()
        val s77 = "ench"
        val array115 = arrayOf<IData?>(null)
        val n117 = 0
        val hashMap156 = HashMap<String, IData>()
        hashMap156["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap156["id"] = ExpandShort.asNBT(35.toShort())
        array115[n117] = ExpandAnyDict.asData(hashMap156)
        hashMap155[s77] = ExpandAnyArray.asData(array115)
        hashMap155["RepairCost"] = ExpandInt.toData(2)
        val withTag39 = item79.withTag(ExpandAnyDict.asData(hashMap155))
        val array116 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 46), null, null)
        val n118 = 1
        val item80 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap157 = HashMap<String, IData>()
        val s78 = "StoredEnchantments"
        val array117 = arrayOf<IData?>(null)
        val n119 = 0
        val hashMap158 = HashMap<String, IData>()
        hashMap158["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap158["id"] = ExpandShort.asNBT(35.toShort())
        array117[n119] = ExpandAnyDict.asData(hashMap158)
        hashMap157[s78] = ExpandAnyArray.asData(array117)
        array116[n118] = IngredientCondition.onlyWithTag(item80, ExpandAnyDict.asData(hashMap157))
        array116[2] = ItemBracketHandler.getItem("OpenComputers:item", 1)
        recipes39.addShapeless(withTag39, array116, null)
        val recipes40 = MineTweakerAPI.recipes
        val item81 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 47)
        val hashMap159 = HashMap<String, IData>()
        val s79 = "ench"
        val array118 = arrayOf<IData?>(null)
        val n120 = 0
        val hashMap160 = HashMap<String, IData>()
        hashMap160["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap160["id"] = ExpandShort.asNBT(35.toShort())
        array118[n120] = ExpandAnyDict.asData(hashMap160)
        hashMap159[s79] = ExpandAnyArray.asData(array118)
        hashMap159["RepairCost"] = ExpandInt.toData(2)
        val withTag40 = item81.withTag(ExpandAnyDict.asData(hashMap159))
        val array119 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 47), null, null)
        val n121 = 1
        val item82 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap161 = HashMap<String, IData>()
        val s80 = "StoredEnchantments"
        val array120 = arrayOf<IData?>(null)
        val n122 = 0
        val hashMap162 = HashMap<String, IData>()
        hashMap162["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap162["id"] = ExpandShort.asNBT(35.toShort())
        array120[n122] = ExpandAnyDict.asData(hashMap162)
        hashMap161[s80] = ExpandAnyArray.asData(array120)
        array119[n121] = IngredientCondition.onlyWithTag(item82, ExpandAnyDict.asData(hashMap161))
        array119[2] = ItemBracketHandler.getItem("OpenComputers:item", 2)
        recipes40.addShapeless(withTag40, array119, null)
        val recipes41 = MineTweakerAPI.recipes
        val item83 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 48)
        val hashMap163 = HashMap<String, IData>()
        val s81 = "ench"
        val array121 = arrayOf<IData?>(null)
        val n123 = 0
        val hashMap164 = HashMap<String, IData>()
        hashMap164["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap164["id"] = ExpandShort.asNBT(35.toShort())
        array121[n123] = ExpandAnyDict.asData(hashMap164)
        hashMap163[s81] = ExpandAnyArray.asData(array121)
        hashMap163["RepairCost"] = ExpandInt.toData(2)
        val withTag41 = item83.withTag(ExpandAnyDict.asData(hashMap163))
        val array122 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 48), null, null)
        val n124 = 1
        val item84 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap165 = HashMap<String, IData>()
        val s82 = "StoredEnchantments"
        val array123 = arrayOf<IData?>(null)
        val n125 = 0
        val hashMap166 = HashMap<String, IData>()
        hashMap166["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap166["id"] = ExpandShort.asNBT(35.toShort())
        array123[n125] = ExpandAnyDict.asData(hashMap166)
        hashMap165[s82] = ExpandAnyArray.asData(array123)
        array122[n124] = IngredientCondition.onlyWithTag(item84, ExpandAnyDict.asData(hashMap165))
        array122[2] = ItemBracketHandler.getItem("OpenComputers:item", 38)
        recipes41.addShapeless(withTag41, array122, null)
        val recipes42 = MineTweakerAPI.recipes
        val item85 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 49)
        val hashMap167 = HashMap<String, IData>()
        val s83 = "ench"
        val array124 = arrayOf<IData?>(null)
        val n126 = 0
        val hashMap168 = HashMap<String, IData>()
        hashMap168["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap168["id"] = ExpandShort.asNBT(35.toShort())
        array124[n126] = ExpandAnyDict.asData(hashMap168)
        hashMap167[s83] = ExpandAnyArray.asData(array124)
        hashMap167["RepairCost"] = ExpandInt.toData(2)
        val withTag42 = item85.withTag(ExpandAnyDict.asData(hashMap167))
        val array125 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 49), null, null)
        val n127 = 1
        val item86 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap169 = HashMap<String, IData>()
        val s84 = "StoredEnchantments"
        val array126 = arrayOf<IData?>(null)
        val n128 = 0
        val hashMap170 = HashMap<String, IData>()
        hashMap170["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap170["id"] = ExpandShort.asNBT(35.toShort())
        array126[n128] = ExpandAnyDict.asData(hashMap170)
        hashMap169[s84] = ExpandAnyArray.asData(array126)
        array125[n127] = IngredientCondition.onlyWithTag(item86, ExpandAnyDict.asData(hashMap169))
        array125[2] = ItemBracketHandler.getItem("OpenComputers:item", 39)
        recipes42.addShapeless(withTag42, array125, null)
        val recipes43 = MineTweakerAPI.recipes
        val item87 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 50)
        val hashMap171 = HashMap<String, IData>()
        val s85 = "ench"
        val array127 = arrayOf<IData?>(null)
        val n129 = 0
        val hashMap172 = HashMap<String, IData>()
        hashMap172["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap172["id"] = ExpandShort.asNBT(35.toShort())
        array127[n129] = ExpandAnyDict.asData(hashMap172)
        hashMap171[s85] = ExpandAnyArray.asData(array127)
        hashMap171["RepairCost"] = ExpandInt.toData(2)
        val withTag43 = item87.withTag(ExpandAnyDict.asData(hashMap171))
        val array128 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 50), null, null)
        val n130 = 1
        val item88 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap173 = HashMap<String, IData>()
        val s86 = "StoredEnchantments"
        val array129 = arrayOf<IData?>(null)
        val n131 = 0
        val hashMap174 = HashMap<String, IData>()
        hashMap174["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap174["id"] = ExpandShort.asNBT(35.toShort())
        array129[n131] = ExpandAnyDict.asData(hashMap174)
        hashMap173[s86] = ExpandAnyArray.asData(array129)
        array128[n130] = IngredientCondition.onlyWithTag(item88, ExpandAnyDict.asData(hashMap173))
        array128[2] = ItemBracketHandler.getItem("OpenComputers:item", 69)
        recipes43.addShapeless(withTag43, array128, null)
        val recipes44 = MineTweakerAPI.recipes
        val item89 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 51)
        val hashMap175 = HashMap<String, IData>()
        val s87 = "ench"
        val array130 = arrayOf<IData?>(null)
        val n132 = 0
        val hashMap176 = HashMap<String, IData>()
        hashMap176["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap176["id"] = ExpandShort.asNBT(35.toShort())
        array130[n132] = ExpandAnyDict.asData(hashMap176)
        hashMap175[s87] = ExpandAnyArray.asData(array130)
        hashMap175["RepairCost"] = ExpandInt.toData(2)
        val withTag44 = item89.withTag(ExpandAnyDict.asData(hashMap175))
        val array131 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 51), null, null)
        val n133 = 1
        val item90 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap177 = HashMap<String, IData>()
        val s88 = "StoredEnchantments"
        val array132 = arrayOf<IData?>(null)
        val n134 = 0
        val hashMap178 = HashMap<String, IData>()
        hashMap178["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap178["id"] = ExpandShort.asNBT(35.toShort())
        array132[n134] = ExpandAnyDict.asData(hashMap178)
        hashMap177[s88] = ExpandAnyArray.asData(array132)
        array131[n133] = IngredientCondition.onlyWithTag(item90, ExpandAnyDict.asData(hashMap177))
        array131[2] = ItemBracketHandler.getItem("gregtech:gt.blockmachines", 341)
        recipes44.addShapeless(withTag44, array131, null)
        val recipes45 = MineTweakerAPI.recipes
        val item91 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 52)
        val hashMap179 = HashMap<String, IData>()
        val s89 = "ench"
        val array133 = arrayOf<IData?>(null)
        val n135 = 0
        val hashMap180 = HashMap<String, IData>()
        hashMap180["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap180["id"] = ExpandShort.asNBT(35.toShort())
        array133[n135] = ExpandAnyDict.asData(hashMap180)
        hashMap179[s89] = ExpandAnyArray.asData(array133)
        hashMap179["RepairCost"] = ExpandInt.toData(2)
        val withTag45 = item91.withTag(ExpandAnyDict.asData(hashMap179))
        val array134 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 52), null, null)
        val n136 = 1
        val item92 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap181 = HashMap<String, IData>()
        val s90 = "StoredEnchantments"
        val array135 = arrayOf<IData?>(null)
        val n137 = 0
        val hashMap182 = HashMap<String, IData>()
        hashMap182["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap182["id"] = ExpandShort.asNBT(35.toShort())
        array135[n137] = ExpandAnyDict.asData(hashMap182)
        hashMap181[s90] = ExpandAnyArray.asData(array135)
        array134[n136] = IngredientCondition.onlyWithTag(item92, ExpandAnyDict.asData(hashMap181))
        array134[2] = ItemBracketHandler.getItem("witchery:witchleaves", 0)
        recipes45.addShapeless(withTag45, array134, null)
        val recipes46 = MineTweakerAPI.recipes
        val item93 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 53)
        val hashMap183 = HashMap<String, IData>()
        val s91 = "ench"
        val array136 = arrayOf<IData?>(null)
        val n138 = 0
        val hashMap184 = HashMap<String, IData>()
        hashMap184["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap184["id"] = ExpandShort.asNBT(35.toShort())
        array136[n138] = ExpandAnyDict.asData(hashMap184)
        hashMap183[s91] = ExpandAnyArray.asData(array136)
        hashMap183["RepairCost"] = ExpandInt.toData(2)
        val withTag46 = item93.withTag(ExpandAnyDict.asData(hashMap183))
        val array137 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 53), null, null)
        val n139 = 1
        val item94 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap185 = HashMap<String, IData>()
        val s92 = "StoredEnchantments"
        val array138 = arrayOf<IData?>(null)
        val n140 = 0
        val hashMap186 = HashMap<String, IData>()
        hashMap186["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap186["id"] = ExpandShort.asNBT(35.toShort())
        array138[n140] = ExpandAnyDict.asData(hashMap186)
        hashMap185[s92] = ExpandAnyArray.asData(array138)
        array137[n139] = IngredientCondition.onlyWithTag(item94, ExpandAnyDict.asData(hashMap185))
        array137[2] = ItemBracketHandler.getItem("witchery:ingredient", 95)
        recipes46.addShapeless(withTag46, array137, null)
        val recipes47 = MineTweakerAPI.recipes
        val item95 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 54)
        val hashMap187 = HashMap<String, IData>()
        val s93 = "ench"
        val array139 = arrayOf<IData?>(null)
        val n141 = 0
        val hashMap188 = HashMap<String, IData>()
        hashMap188["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap188["id"] = ExpandShort.asNBT(35.toShort())
        array139[n141] = ExpandAnyDict.asData(hashMap188)
        hashMap187[s93] = ExpandAnyArray.asData(array139)
        hashMap187["RepairCost"] = ExpandInt.toData(2)
        val withTag47 = item95.withTag(ExpandAnyDict.asData(hashMap187))
        val array140 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 54), null, null)
        val n142 = 1
        val item96 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap189 = HashMap<String, IData>()
        val s94 = "StoredEnchantments"
        val array141 = arrayOf<IData?>(null)
        val n143 = 0
        val hashMap190 = HashMap<String, IData>()
        hashMap190["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap190["id"] = ExpandShort.asNBT(35.toShort())
        array141[n143] = ExpandAnyDict.asData(hashMap190)
        hashMap189[s94] = ExpandAnyArray.asData(array141)
        array140[n142] = IngredientCondition.onlyWithTag(item96, ExpandAnyDict.asData(hashMap189))
        array140[2] = ItemBracketHandler.getItem("witchery:ingredient", 11)
        recipes47.addShapeless(withTag47, array140, null)
        val recipes48 = MineTweakerAPI.recipes
        val item97 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 55)
        val hashMap191 = HashMap<String, IData>()
        val s95 = "ench"
        val array142 = arrayOf<IData?>(null)
        val n144 = 0
        val hashMap192 = HashMap<String, IData>()
        hashMap192["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap192["id"] = ExpandShort.asNBT(35.toShort())
        array142[n144] = ExpandAnyDict.asData(hashMap192)
        hashMap191[s95] = ExpandAnyArray.asData(array142)
        hashMap191["RepairCost"] = ExpandInt.toData(2)
        val withTag48 = item97.withTag(ExpandAnyDict.asData(hashMap191))
        val array143 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 55), null, null)
        val n145 = 1
        val item98 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap193 = HashMap<String, IData>()
        val s96 = "StoredEnchantments"
        val array144 = arrayOf<IData?>(null)
        val n146 = 0
        val hashMap194 = HashMap<String, IData>()
        hashMap194["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap194["id"] = ExpandShort.asNBT(35.toShort())
        array144[n146] = ExpandAnyDict.asData(hashMap194)
        hashMap193[s96] = ExpandAnyArray.asData(array144)
        array143[n145] = IngredientCondition.onlyWithTag(item98, ExpandAnyDict.asData(hashMap193))
        array143[2] = ItemBracketHandler.getItem("witchery:ingredient", 96)
        recipes48.addShapeless(withTag48, array143, null)
        val recipes49 = MineTweakerAPI.recipes
        val item99 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 56)
        val hashMap195 = HashMap<String, IData>()
        val s97 = "ench"
        val array145 = arrayOf<IData?>(null)
        val n147 = 0
        val hashMap196 = HashMap<String, IData>()
        hashMap196["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap196["id"] = ExpandShort.asNBT(35.toShort())
        array145[n147] = ExpandAnyDict.asData(hashMap196)
        hashMap195[s97] = ExpandAnyArray.asData(array145)
        hashMap195["RepairCost"] = ExpandInt.toData(2)
        val withTag49 = item99.withTag(ExpandAnyDict.asData(hashMap195))
        val array146 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 56), null, null)
        val n148 = 1
        val item100 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap197 = HashMap<String, IData>()
        val s98 = "StoredEnchantments"
        val array147 = arrayOf<IData?>(null)
        val n149 = 0
        val hashMap198 = HashMap<String, IData>()
        hashMap198["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap198["id"] = ExpandShort.asNBT(35.toShort())
        array147[n149] = ExpandAnyDict.asData(hashMap198)
        hashMap197[s98] = ExpandAnyArray.asData(array147)
        array146[n148] = IngredientCondition.onlyWithTag(item100, ExpandAnyDict.asData(hashMap197))
        array146[2] = ItemBracketHandler.getItem("witchery:leonardsurn", 3)
        recipes49.addShapeless(withTag49, array146, null)
        val recipes50 = MineTweakerAPI.recipes
        val item101 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 57)
        val hashMap199 = HashMap<String, IData>()
        val s99 = "ench"
        val array148 = arrayOf<IData?>(null)
        val n150 = 0
        val hashMap200 = HashMap<String, IData>()
        hashMap200["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap200["id"] = ExpandShort.asNBT(35.toShort())
        array148[n150] = ExpandAnyDict.asData(hashMap200)
        hashMap199[s99] = ExpandAnyArray.asData(array148)
        hashMap199["RepairCost"] = ExpandInt.toData(2)
        val withTag50 = item101.withTag(ExpandAnyDict.asData(hashMap199))
        val array149 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 57), null, null)
        val n151 = 1
        val item102 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap201 = HashMap<String, IData>()
        val s100 = "StoredEnchantments"
        val array150 = arrayOf<IData?>(null)
        val n152 = 0
        val hashMap202 = HashMap<String, IData>()
        hashMap202["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap202["id"] = ExpandShort.asNBT(35.toShort())
        array150[n152] = ExpandAnyDict.asData(hashMap202)
        hashMap201[s100] = ExpandAnyArray.asData(array150)
        array149[n151] = IngredientCondition.onlyWithTag(item102, ExpandAnyDict.asData(hashMap201))
        array149[2] = ItemBracketHandler.getItem("HardcoreEnderExpansion:enderman_head", 0)
        recipes50.addShapeless(withTag50, array149, null)
        val recipes51 = MineTweakerAPI.recipes
        val item103 = ItemBracketHandler.getItem("enhancedlootbags:lootbag", 58)
        val hashMap203 = HashMap<String, IData>()
        val s101 = "ench"
        val array151 = arrayOf<IData?>(null)
        val n153 = 0
        val hashMap204 = HashMap<String, IData>()
        hashMap204["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap204["id"] = ExpandShort.asNBT(35.toShort())
        array151[n153] = ExpandAnyDict.asData(hashMap204)
        hashMap203[s101] = ExpandAnyArray.asData(array151)
        hashMap203["RepairCost"] = ExpandInt.toData(2)
        val withTag51 = item103.withTag(ExpandAnyDict.asData(hashMap203))
        val array152 = arrayOf<IIngredient?>(ItemBracketHandler.getItem("enhancedlootbags:lootbag", 58), null, null)
        val n154 = 1
        val item104 = ItemBracketHandler.getItem("minecraft:enchanted_book", 0)
        val hashMap205 = HashMap<String, IData>()
        val s102 = "StoredEnchantments"
        val array153 = arrayOf<IData?>(null)
        val n155 = 0
        val hashMap206 = HashMap<String, IData>()
        hashMap206["lvl"] = ExpandShort.asNBT(3.toShort())
        hashMap206["id"] = ExpandShort.asNBT(35.toShort())
        array153[n155] = ExpandAnyDict.asData(hashMap206)
        hashMap205[s102] = ExpandAnyArray.asData(array153)
        array152[n154] = IngredientCondition.onlyWithTag(item104, ExpandAnyDict.asData(hashMap205))
        array152[2] = ItemBracketHandler.getItem("HardcoreEnderExpansion:rune", 5)
        recipes51.addShapeless(withTag51, array152, null)
    }
}